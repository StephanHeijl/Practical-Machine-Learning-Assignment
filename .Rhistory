library(caret)
allData <- read.csv("pml-training.csv") # Load training file
relevantData <- allData
dp <- createDataPartition(relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
nrow(trainingData)
nrow(testingData)
modelFit <- train( classe ~ ., data=trainingData, method="rf" )
names(trainingData)
modelFit <- train( classe ~ roll_forearm, data=trainingData, method="rf" )
modelFit <- train( classe ~ roll_forearm, data=trainingData[1:100], method="rf" )
modelFit <- train( classe ~ roll_forearm, data=trainingData[1:100,], method="rf" )
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
modelFit <- train( classe ~ roll_forearm, data=trainingData[1:100,], method="rf",prox=T )
trainingData[1:100,]
names(trainingData[1:100,])
trainingData[1:100,]
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf",prox=T )
dp <- createDataPartition(relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
dp <- createDataPartition(relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf",prox=T )
warnings()
library(caret)
allData <- read.csv("pml-training-pca-2.csv") # Load training file
#variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F))]
#metaCols <- c(1,2,3,4,5,6) # Columns with metadata
#relevantData <- variantData[-metaCols] 
relevantData <- allData
names( relevantData ) # These are all the remaining properties
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train( classe ~ ., data=trainingData, method="rf", preProcess="pca" )
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf")
trainingData
names(trainingData)
nrow(trainingData)
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf")
modelFit <- train( classe ~ ., newdata=trainingData[1:100,], method="rf")
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf")
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf",header=T)
testingData <- relevantData[-dp,]allData <- read.csv("pml-training-pca-2.csv",header=T) # Load training file
#variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F))]
#metaCols <- c(1,2,3,4,5,6) # Columns with metadata
#relevantData <- variantData[-metaCols] 
relevantData <- allData
names( relevantData ) # These are all the remaining properties
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
modelFit <- train( classe ~ ., data=trainingData, method="rf" )
modelFit <- train( classe ~ ., data=trainingData[1:100,], method="rf" )
modelFit <- train( classe ~ ., data=trainingData[1:500,], method="rf" )
warnings()
modelFit <- train( classe ~ ., data=trainingData[1:1000,], method="rf" )
warnings()
modelFit <- train( classe ~ ., data=trainingData, method="rf" )
shuffledTraining <- trainingData[sample(nrow(trainingData))]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
modelFit <- train( classe ~ ., data=shuffledTraining[1:1000,], method="rf" )
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf" )
modelFit
results <- predict(modelFit, newdata=testingData[1:100,])
confusionMatrix(results)
results
results <- predict(modelFit, data=testingData[1:100,])
results <- predict(modelFit, newdata=testingData[1:100,])
confusionMatrix(results, testingData$classe)
confusionMatrix(results, testingData$classe[1:100,])
confusionMatrix(results, testingData[1:100,]$classe)
shuffledTesting <- testingData[sample(nrow(trainingData))]
shuffledTesting <- testingData[sample(nrow(testingData))]
shuffledTesting <- testData[sample(nrow(testData))]
testingData
sample(nrow(testData))
sample(nrow(testingData))
shuffledTesting <- testData[sample(nrow(testData)),]
shuffledTesting <- testingData[sample(nrow(testingData)),]
results <- predict(modelFit, newdata=shuffledTesting[1:100,])
confusionMatrix(results, shuffledTesting$classe[1:100,])
shuffledTesting$classe
shuffledTesting
confusionMatrix(results, shuffledTesting[1:100,]$classe)
modelFit <- train( classe ~ ., data=shuffledTraining[1:1000,], method="rf" )
results <- predict(modelFit, newdata=shuffledTesting[1:100,])
confusionMatrix(results, shuffledTesting[1:100,]$classe)
modelFit <- train( classe ~ ., data=shuffledTraining, method="rf" )
results <- predict(modelFit, newdata=shuffledTesting)
confusionMatrix(results, shuffledTesting$classe)
q()
library(caret)
#allData <- read.csv("pml-training-pca-2.csv",header=T) # Load training file
allData <- read.csv("pml-training.csv",header=T) # Load training file
variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F, freqCut = 95/5))]
metaCols <- c(1,2,3,4,5,6) # Columns with metadata
relevantData <- variantData[-metaCols] 
#relevantData <- allData
#names( relevantData ) # These are all the remaining properties
length(names(relevantData))
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
shuffledTesting <- testingData[sample(nrow(testingData)),]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", preProcess="pca" )
results <- predict(modelFit, newdata=shuffledTesting[1:100,], na.action = na.omit)
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", preProcess="pca" )
warnings()
warnings()
variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F, freqCut = 95/45))]
metaCols <- c(1,2,3,4,5,6) # Columns with metadata
relevantData <- variantData[-metaCols] 
#relevantData <- allData
#names( relevantData ) # These are all the remaining properties
length(names(relevantData))
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
shuffledTesting <- testingData[sample(nrow(testingData)),]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", preProcess="pca" )
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", preProcess="pca" )
shuffledTraining
head(shuffledTraining)
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", preProcess="pca", na.action = na.omit )
warnings()
names(shuffledTraining)
variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F, freqCut = 95/45))]
metaCols <- c(1,2,3,4,5,6) # Columns with metadata
relevantData <- variantData[-metaCols] 
#relevantData <- allData
#names( relevantData ) # These are all the remaining properties
length(names(relevantData))
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
shuffledTesting <- testingData[sample(nrow(testingData)),]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", na.action = na.omit )
results <- predict(modelFit, newdata=shuffledTesting[1:100,], na.action = na.omit)
confusionMatrix(results, shuffledTesting[1:100,]$classe)
allData <- read.csv("pml-training.csv",header=T) # Load training file
variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F, freqCut = 95/45))]
metaCols <- c(1,2,3,4,5,6) # Columns with metadata
relevantData <- variantData[-metaCols] 
#relevantData <- allData
#names( relevantData ) # These are all the remaining properties
length(names(relevantData))
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
shuffledTesting <- testingData[sample(nrow(testingData)),]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", na.action = na.omit )
results <- predict(modelFit, newdata=shuffledTesting[1:100,], na.action = na.omit)
shuffledTesting[1:100,]
names(shuffledTesting)
results <- predict(modelFit, newdata=shuffledTesting[1:100,], na.action = na.omit)
modelFit
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf", na.action = na.omit )
modelFit <- train( classe ~ ., data=shuffledTraining[1:100,], method="rf")
q()
library(caret)
allData <- read.csv("pml-training-nona.csv",header=T) # Load training file
variantData <- allData[,-c(nearZeroVar( allData, saveMetrics=F, freqCut = 95/45))]
metaCols <- c(1,2,3,4,5,6) # Columns with metadata
relevantData <- variantData[-metaCols]
dp <- createDataPartition(y=relevantData$classe, p=0.66)[[1]]
trainingData <- relevantData[dp,]
testingData <- relevantData[-dp,]
set.seed(1)
shuffledTesting <- testingData[sample(nrow(testingData)),]
shuffledTraining <- trainingData[sample(nrow(trainingData)),]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8), allowParallel=T)
trainN <- length(trainingData)
testN <- length(testingData)
modelFit <- train( classe ~ ., data=shuffledTraining[1:trainN,], method="rf", trControl=ctrl, preProcess='pca' )
modelFit
results <- predict(modelFit, newdata=shuffledTesting[1:testN,])
confusionMatrix(results, shuffledTesting[1:testN,]$classe)
testN
trainN
trainN <- nrow(trainingData)
testN <- nrow(testingData)
modelFit <- train( classe ~ ., data=shuffledTraining[1:trainN,], method="rf", trControl=ctrl, preProcess='pca' )
modelFit
results <- predict(modelFit, newdata=shuffledTesting[1:testN,])
confusionMatrix(results, shuffledTesting[1:testN,]$classe)
 ctable <- as.table(matrix(c(Confusion$nnet$table), nrow = 2, byrow = TRUE)) fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
 ctable <- as.table(matrix(c(Confusion$nnet$table), nrow = 2, byrow = TRUE)); fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
Confusion <- confusionMatrix(results, shuffledTesting[1:testN,]$classe)
 ctable <- as.table(matrix(c(Confusion$nnet$table), nrow = 2, byrow = TRUE)); fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
ctable <- as.table(matrix(c(Confusion$nnet$table), nrow = 2, byrow = TRUE));
Confusion
plot(Confusion)
plot( confusionMatrix(results, shuffledTesting[1:testN,]$classe))
allData
head(allData)
hist(allData[7])
allData[7]
allData[8]
hist(allData[8])
we <- gsub(",", "", we)   # remove comma
we <- gsub(",", "", allData[8])   # remove comma
we <- as.numeric(we)      # turn into numbers
hist(we)
hist(we,breaks=1)
we
we <- as.numeric(allData[8])      # turn into numbers
as.numeric(allData)
we <- as.numeric(unlist(allData[8]))      # turn into numbers
hist(we,breaks=1)
hist(we)
ggplot(allData, aes(x=1, fill=classe)) + geom_histogram()
ggplot(allData, aes(x=8, fill=classe)) + geom_histogram()
ggplot(allData, aes(x=6, fill=classe)) + geom_histogram()
names(allData)
ggplot(allData, aes(x=avg_roll_arm, fill=classe)) + geom_histogram()
ggplot(allData, aes(x=roll_arm, fill=classe)) + geom_histogram()
pdf()
ggplot(allData, aes(x=roll_arm, fill=classe)) + geom_histogram()
dev.off()
svg("GoodVariation.svg")
ggplot(allData, aes(x=roll_arm, fill=classe)) + geom_histogram()
dev.off()
svg("BadVariation.svg")
ggplot(allData, aes(x=avg_roll_arm, fill=classe)) + geom_histogram()
dev.off()
confusionMatrix(results, shuffledTesting[1:testN,]$classe)
q()
install.packages("ada")
q()
install.packages("adabag")
q()
